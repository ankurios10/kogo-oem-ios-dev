// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios17.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name TvsSdk
import AVFoundation
@_exported import Apollo
import Combine
import CommonCrypto
import CoreImage
import CoreLocation
import DeveloperToolsSupport
import Foundation
import MapplsAPICore
import MapplsAPIKit
import MapplsIntouch
import MapplsIntouchCore
import MapplsMap
import MessageUI
import Photos
import Swift
import SwiftUI
@_exported import TvsSdk
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os.log
import os

public struct ImagePickerView : SwiftUI.UIViewControllerRepresentable {
  public init(sourceType: UIKit.UIImagePickerController.SourceType, onImagePicked: @escaping (UIKit.UIImage) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) public func makeUIViewController(context: TvsSdk.ImagePickerView.Context) -> UIKit.UIImagePickerController
  @_Concurrency.MainActor(unsafe) public func updateUIViewController(_ uiViewController: UIKit.UIImagePickerController, context: TvsSdk.ImagePickerView.Context)
  @_Concurrency.MainActor(unsafe) public func makeCoordinator() -> TvsSdk.ImagePickerView.Coordinator
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) final public class Coordinator : ObjectiveC.NSObject, UIKit.UINavigationControllerDelegate, UIKit.UIImagePickerControllerDelegate {
    @_Concurrency.MainActor(unsafe) @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
    @_Concurrency.MainActor(unsafe) @objc final public func imagePickerControllerDidCancel(_: UIKit.UIImagePickerController)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewControllerType = UIKit.UIImagePickerController
}

public struct GraphQLHelper {
  public static func graphQLNullableFrom<T>(_ value: T?) -> Apollo.GraphQLNullable<T>
}
@available(iOS 15.0, macOS 12.0, tvOS 15.0, watchOS 8.0, *)
public struct CachedAsyncImage<Content> : SwiftUI.View where Content : SwiftUI.View {
  @_Concurrency.MainActor(unsafe) public var body: some SwiftUI.View {
    get
  }
  public init(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUI.Image
  public init(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1) where Content == SwiftUI.Image
  public init<I, P>(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Image) -> I, @SwiftUI.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUI._ConditionalContent<I, P>, I : SwiftUI.View, P : SwiftUI.View
  public init<I, P>(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, @SwiftUI.ViewBuilder content: @escaping (SwiftUI.Image) -> I, @SwiftUI.ViewBuilder placeholder: @escaping () -> P) where Content == SwiftUI._ConditionalContent<I, P>, I : SwiftUI.View, P : SwiftUI.View
  public init(url: Foundation.URL?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUI.Transaction = Transaction(), @SwiftUI.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  public init(urlRequest: Foundation.URLRequest?, urlCache: Foundation.URLCache = .shared, scale: CoreFoundation.CGFloat = 1, transaction: SwiftUI.Transaction = Transaction(), @SwiftUI.ViewBuilder content: @escaping (SwiftUI.AsyncImagePhase) -> Content)
  public typealias Body = @_opaqueReturnTypeOf("$s6TvsSdk16CachedAsyncImageV4bodyQrvp", 0) __<Content>
}
@_hasMissingDesignatedInitializers final public class SignupOtpRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.SignupOtpRootModel {
  final public func nextButtonSelected()
  final public func backButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.SignupOtpRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.SignupOtpRootModel, rhs: TvsSdk.SignupOtpRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class BottomTabRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.BottomTabRootModel {
  final public func backButtonSelected()
  final public func nextButtonSelected()
  final public func nextLogoutSelected()
  final public func nextStartTripSelected()
  final public func tripButtonSelected()
  final public func coinButtonSelected()
  final public func nextProfileDetailSelected()
  final public func profileButtonSelected()
  final public func nextNotificationSelected()
  final public func shopButtonSelected()
  final public func challengeButtonSelected()
  final public func travelButtonSelected()
  final public func experienceButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.BottomTabRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.BottomTabRootModel, rhs: TvsSdk.BottomTabRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}

@_hasMissingDesignatedInitializers final public class SignupRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.SignupRootModel {
  final public func nextButtonSelected()
  final public func backButtonSelected()
}
extension TvsSdk.SignupRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.SignupRootModel, rhs: TvsSdk.SignupRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class OtpRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.OtpRootModel {
  final public func nextButtonSelected()
  final public func backButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.OtpRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.OtpRootModel, rhs: TvsSdk.OtpRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class CameraRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.CameraRootModel {
  final public func nextButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.CameraRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.CameraRootModel, rhs: TvsSdk.CameraRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class TripDetailRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.TripDetailRootModel {
  final public func nextCoinButtonSelected()
  final public func backButtonSelected()
}
extension TvsSdk.TripDetailRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.TripDetailRootModel, rhs: TvsSdk.TripDetailRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class ProfileRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.ProfileRootModel {
  final public func backButtonSelected()
  final public func nextButtonSelected()
  final public func tripDetailButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.ProfileRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.ProfileRootModel, rhs: TvsSdk.ProfileRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}

@_hasMissingDesignatedInitializers final public class Kogo {
  public static func openCommunityViewIn(_ controller: UIKit.UINavigationController?, with token: Swift.String, onCompletion: (() -> Swift.Void)?)
  public static func deepLinkHandler(_ token: Swift.String, _ deepLink: Swift.String, controller: UIKit.UINavigationController?, onCompletion: (() -> Swift.Void)?)
  public static func backToOem()
  @objc deinit
}
public protocol NavigationCoordinator {
  func push(_ path: any Swift.Hashable)
  func popLast()
}
extension Photos.PHObject : Swift.Identifiable {
  public var id: Swift.String {
    get
  }
  public typealias ID = Swift.String
}
@_hasMissingDesignatedInitializers final public class WelcomeRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.WelcomeRootModel {
  final public func nextButtonSelected()
  final public func backButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.WelcomeRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.WelcomeRootModel, rhs: TvsSdk.WelcomeRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers final public class LoginRootModel : Foundation.ObservableObject {
  @Combine.Published @_projectedValueProperty($text) final public var text: Swift.String {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  final public var $text: Combine.Published<Swift.String>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.LoginRootModel {
  final public func nextButtonSelected()
  final public func signupButtonSelected()
  final public func shareViaWhatsApp(message: Swift.String)
}
extension TvsSdk.LoginRootModel : Swift.Hashable {
  public static func == (lhs: TvsSdk.LoginRootModel, rhs: TvsSdk.LoginRootModel) -> Swift.Bool
  final public func hash(into hasher: inout Swift.Hasher)
  final public var hashValue: Swift.Int {
    get
  }
}
@_hasMissingDesignatedInitializers public class RootViewModel : Foundation.ObservableObject, Swift.Identifiable {
  public enum Path : Swift.Hashable {
    case first(TvsSdk.LoginRootModel)
    case second(TvsSdk.OtpRootModel)
    case third(TvsSdk.BottomTabRootModel)
    case fourth(TvsSdk.CameraRootModel)
    case fifth(TvsSdk.BottomTabRootModel)
    case six(TvsSdk.BottomTabRootModel)
    case seven(TvsSdk.BottomTabRootModel)
    case eight(TvsSdk.SignupRootModel)
    case nine(TvsSdk.SignupOtpRootModel)
    case ten(TvsSdk.TripDetailRootModel)
    case eleven(TvsSdk.BottomTabRootModel)
    case twelve(TvsSdk.BottomTabRootModel)
    case thirteen(TvsSdk.WelcomeRootModel)
    case fourteen(TvsSdk.BottomTabRootModel)
    case fifteen(TvsSdk.BottomTabRootModel)
    case sixteen(TvsSdk.BottomTabRootModel)
    case seventeen(TvsSdk.BottomTabRootModel)
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: TvsSdk.RootViewModel.Path, b: TvsSdk.RootViewModel.Path) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public var id: Foundation.UUID
  @Combine.Published @_projectedValueProperty($paths) public var paths: SwiftUI.NavigationPath {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $paths: Combine.Published<SwiftUI.NavigationPath>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public var firstContentViewModel: TvsSdk.LoginRootModel {
    get
    set
  }
  public var alreadyLoginViewModel: TvsSdk.BottomTabRootModel {
    get
    set
  }
  public typealias ID = Foundation.UUID
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
extension TvsSdk.RootViewModel : TvsSdk.NavigationCoordinator {
  public func push(_ path: any Swift.Hashable)
  public func popLast()
}
extension TvsSdk.RootViewModel {
  public static var mock: TvsSdk.RootViewModel {
    get
  }
}
